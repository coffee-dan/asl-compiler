# AST for 'fibonacci.asl'
SCOPE 'SCOPE_1' <8>
  VARIABLE_INIT SCOPE_1:n
    LITERAL 'int', 0
  WRITE <1>
    LITERAL 'string', 'Enter n: '
  READ <1>
    LVALUE 'SCOPE_1:n' 'int'
  VARIABLE_INIT SCOPE_1:previous
    LITERAL 'int', 0
  VARIABLE_INIT SCOPE_1:current
    LITERAL 'int', 1
  VARIABLE_INIT SCOPE_1:next
    LITERAL 'int', 0
  SCOPE 'SCOPE_2' <2>
    VARIABLE_INIT SCOPE_2:i
      LITERAL 'int', 0
    FOR
      LVALUE 'SCOPE_2:i' 'int'
      LITERAL 'int', 2
      LVALUE 'SCOPE_1:n' 'int'
      LITERAL 'int', 1
      SCOPE 'SCOPE_3' <3>
        BINARY_OP '=' 'int'
          LVALUE 'SCOPE_1:next' 'int'
          BINARY_OP '+' 'int'
            LVALUE 'SCOPE_1:previous' 'int'
            LVALUE 'SCOPE_1:current' 'int'
        BINARY_OP '=' 'int'
          LVALUE 'SCOPE_1:previous' 'int'
          LVALUE 'SCOPE_1:current' 'int'
        BINARY_OP '=' 'int'
          LVALUE 'SCOPE_1:current' 'int'
          LVALUE 'SCOPE_1:next' 'int'
  WRITE <5>
    LITERAL 'string', 'fibonacci('
    LVALUE 'SCOPE_1:n' 'int'
    LITERAL 'string', ') = '
    LVALUE 'SCOPE_1:current' 'int'
    LITERAL 'string', '\n'

# Symbol table
Scope ENVIRONMENT(0) [0] <NONE>
Scope SCOPE_1(5) [4] <ENVIRONMENT>
  <Entry SCOPE_1(14) 'current':'int'>
  <Entry SCOPE_1(7) 'n':'int'>
  <Entry SCOPE_1(15) 'next':'int'>
  <Entry SCOPE_1(13) 'previous':'int'>
Scope SCOPE_2(0) [1] <SCOPE_1>
  <Entry SCOPE_2(0) 'i':'int'>
Scope SCOPE_3(21) [0] <SCOPE_2>
