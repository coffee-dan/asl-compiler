#-----------------------------------------------------------
# ASL version 3
#-----------------------------------------------------------
# Program

  { <statement_list> }

# Statement List -- A list of statements separated by semicolons.
#   A semicolon may terminate the list, but this is not required.

  statement [ ; statement ]* ;?

#---------------------------------------
# Statement:  Break

  break

  * A break statement may occur only within a looping statement
    (a while or a for).  It may be arbitrarily nested.

#---------------------------------------
# Statement:  Continue

  continue

  * A continue statement may occur only within a looping statement
    (a while or a for).  It may be arbitrarily nested.

#---------------------------------------
# Statement:  Declaration

  <type> <identifier> [ = <expression> ]

  * An identifier may not be redeclared within the same scope.
    (It's OK if it's redeclared in a nested scope, just not the
     same scope.)

  * The type of the initialization expression must be the same as
    the declared type.  (E.g., no integer initializers for real
    variables and vice-versa.)

#---------------------------------------
# Statement:  Expression

  <expression>

  === Operators ===

    =
    ||
    &&
    ==, <>
    <, <=, >, >=
    +, -
    *, /, %
    ^
    - (unary), + (unary)
    ! (unary)

  === Literals ===

    INT_LITERAL     a sequnce of decimal digits.

    REAL_LITERAL    a sequence of decimal digits including a
      decimal point '.' and optionally an exponent, which is the
      letter 'e' or 'E' optionally followed by a sign ('+' or
      '-') followed by a sequence of decimal digits.

      If the exponent is given, the decimal point may be omitted.

    STRING_LITERAL  any characters except " and \n within
      quotation marks (").  The following escapes are permitted:
        \"    a " character
        \\    a \ character
        \?    a ? character
        \a    Alert            -> character  7 (decimal)
        \b    Backspace        -> character  8 (decimal)
        \e    Escape           -> character 27 (decimal)
        \f    Formfeed         -> character 12 (decimal)
        \n    Newline          -> character 10 (decimal)
        \r    Carriage Return  -> character 13 (decimal)
        \t    Horizontal Tab   -> character  9 (decimal)
        \v    Vertical Tab     -> character 11 (decimal)
        \xnn  character nn, where nn is a two-digit hexadecimal
                number
        \ooo  character ooo, where ooo is an up-to-three-digit
                octal number. ooo must be less than or equal to
                377 (octal)

#---------------------------------------
# Statement:  For

  for <identifer> = <expression> to <expression> [ by <expression> ] do
    <statement_list>
  end for

  * The start, stop, and step expressions must be of type integer.

  * The index variable may not appear on the LHS of any assignment
    anywhere within the body of the loop.

#---------------------------------------
# Statement:  If

  if <expression> then
    <statement_list>
  [ elif <expression> then
      <statement_list> ]*
  [ else
      <statement_list> ]
  end if

  * The test expressions must be of type integer.

#---------------------------------------
# Statement: Read

  read( <identifier> [ , <identifier> ]* )

  * Only lvalues (for now, this mean identifiers) may be listed
    in a read statement.

#---------------------------------------
# Statement: While

  while <expression> do
    <statement_list>
  end while

  * The test expression must be of type integer.

#---------------------------------------
# Statement: Write

  write( [ <expression> [ , <expression> ]* ]? )

#---------------------------------------
# Type (Scalar)

  int | real

#-----------------------------------------------------------
